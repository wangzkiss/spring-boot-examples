<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.vigor.modules.meta.dao.MetaResultProDao">
    
	<sql id="metaResultProColumns">
		a.id AS "id",
		a.type AS "type",
		a.result_id AS "resultId",
		a.pro_name AS "proName",
		a.pro_index AS "proIndex",
		a.pro_type AS "proType",
		a.data_format AS "dataFormat",
		a.pro_desc AS "proDesc",
		a.create_by AS "createBy.name",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.name",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag",
		a.column_size AS "columnSize"
	</sql>
	
	<sql id="metaResultProJoins">
		LEFT JOIN e_meta_result b ON b.id = a.result_id
	</sql>
    
	<select id="get" resultType="MetaResultPro">
		SELECT 
			<include refid="metaResultProColumns"/>
		FROM e_meta_result_pro a
		<include refid="metaResultProJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="MetaResultPro">
		SELECT 
			<include refid="metaResultProColumns"/>
		FROM e_meta_result_pro a
		<include refid="metaResultProJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="resultId != null and resultId != ''">
				AND a.result_id = #{resultId.id}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.pro_index ASC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="MetaResultPro">
		SELECT 
			<include refid="metaResultProColumns"/>
		FROM e_meta_result_pro a
		<include refid="metaResultProJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.pro_index ASC
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO e_meta_result_pro(
		<!-- 	id, -->
			result_id,
			pro_name,
			type,
			pro_index,
			pro_type,
			data_format,
			pro_desc,
			create_by,
			create_date,
			update_by,
			update_date,
			del_flag,
			column_size
		) VALUES (
			<!-- #{id}, -->
			#{resultId.id},
			#{proName},
			#{type},
			#{proIndex},
			#{proType},
			#{dataFormat},
			#{proDesc},
			#{createBy.name},
			#{createDate},
			#{updateBy.name},
			#{updateDate},
			#{delFlag},
			#{columnSize}
		)
	</insert>
	
	<update id="update">
		UPDATE e_meta_result_pro SET 	
		<!-- 	result_id = #{resultId.id}, -->
			pro_name = #{proName},
			type=#{type},
			pro_index = #{proIndex},
			pro_type = #{proType},
			data_format = #{dataFormat},
			pro_desc = #{proDesc},
			update_by = #{updateBy.name},
			update_date = #{updateDate},
			column_size = #{columnSize}
		WHERE id = #{id}
	</update>
	
	
	<!--物理删除-->
	<update id="delete">
		DELETE FROM e_meta_result_pro
		<choose>
			<when test="id !=null and id != ''">
				WHERE id = #{id}
			</when>
			<otherwise>
				WHERE result_id = #{resultId.id}
			</otherwise>
		</choose>
	</update>
	
	<!--逻辑删除-->
	<update id="deleteByLogic">
		UPDATE e_meta_result_pro SET 
			del_flag = #{DEL_FLAG_DELETE}
		<choose>
			<when test="id !=null and id != ''">
				WHERE id = #{id}
			</when>
			<otherwise>
				WHERE result_id = #{resultId.id}
			</otherwise>
		</choose>
	</update>
	
	
	<!-- 根据实体名称和字段名称和字段值获取唯一记录 -->
	<select id="findUniqueByProperty" resultType="MetaResultPro" statementType="STATEMENT">
		select * FROM e_meta_result_pro  where ${propertyName} = '${value}'
	</select>
	
	<select id="getByResultIdAndProName" resultType="MetaResultPro">
		select * FROM e_meta_result_pro where result_id = #{resultId} and pro_name = #{proName}
	</select>
</mapper>